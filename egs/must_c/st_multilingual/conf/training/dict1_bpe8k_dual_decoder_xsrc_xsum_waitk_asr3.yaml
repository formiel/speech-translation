# network architecture
# encoder related
elayers: 12
eunits: 2048
# decoder related
dlayers: 6
dunits: 2048
# attention related
adim: 256
aheads: 4

# multitask
mtlalpha: 0.0
asr-weight: 0.3
mt-weight: 0.0

# Cross attention
lang-tok: decoder-pre
cross-weight: 0.3
cross-weight-learnable: True
cross-self: False
cross-src: True
cross-to-asr: True
cross-to-st: True
cross-operator: sum
cross-src-from: before-src
wait-k-asr: 3

# label smoothing
lsm-weight: 0.1

# minibatch related
batch-size: 32 # per-gpu batch_size (original: 64)
maxlen-in: 512  # if input length  > maxlen-in, batchsize is automatically reduced
maxlen-out: 150 # if output length > maxlen-out, batchsize is automatically reduced

# saving interval
report-interval-iters: 5000
save-interval-iters: 5000
n-iter-processes: 24

# optimization related
sortagrad: 0 # Feed samples from shortest to longest ; -1: enabled for all epochs, 0: disabled, other: enabled for 'other' epochs
opt: noam
accum-grad: 2
grad-clip: 5
patience: 0
epochs: 25 
time-limit: 100000
dropout-rate: 0.1

# transformer specific setting
backend: pytorch
model-module: "espnet.nets.pytorch_backend.e2e_st_transformer_dual:E2EDualDecoder"
transformer-input-layer: conv2d     # encoder architecture type
transformer-lr: 2.5
transformer-warmup-steps: 25000
transformer-attn-dropout-rate: 0.0
transformer-length-normalized-loss: false
transformer-init: pytorch

# pre-training related
enc-init-mods: encoder.embed,encoder.encoders,encoder.after_norm
dec-init-mods: dual_decoder.embed,dual_decoder.embed_asr,dual_decoder.dual_decoders,dual_decoder.dual_decoders_asr,dual_decoder.after_norm,dual_decoder.after_norm_asr,dual_decoder.output_layer,dual_decoder.output_layer_asr

enc-init: /gpfswork/rech/dbn/umz16dj/pretrained_models_st/my_training/decoder_pre_1decoder/model.150k.acc.best
dec-init: /gpfswork/rech/dbn/umz16dj/pretrained_models_st/my_training/decoder_pre_1decoder/model.150k.acc.best

# enc-init: init/model.150k.acc.best
# dec-init: init/model.150k.acc.best